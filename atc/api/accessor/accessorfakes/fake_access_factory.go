// Code generated by counterfeiter. DO NOT EDIT.
package accessorfakes

import (
	"net/http"
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/concourse/atc/api/accessor"
)

type FakeAccessFactory struct {
	CreateStub        func(*http.Request, string) (accessor.Access, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 *http.Request
		arg2 string
	}
	createReturns struct {
		result1 accessor.Access
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 accessor.Access
		result2 error
	}
	CustomizeActionRoleMapStub        func(lager.Logger, accessor.CustomActionRoleMap) error
	customizeActionRoleMapMutex       sync.RWMutex
	customizeActionRoleMapArgsForCall []struct {
		arg1 lager.Logger
		arg2 accessor.CustomActionRoleMap
	}
	customizeActionRoleMapReturns struct {
		result1 error
	}
	customizeActionRoleMapReturnsOnCall map[int]struct {
		result1 error
	}
	RoleOfActionStub        func(string) string
	roleOfActionMutex       sync.RWMutex
	roleOfActionArgsForCall []struct {
		arg1 string
	}
	roleOfActionReturns struct {
		result1 string
	}
	roleOfActionReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccessFactory) Create(arg1 *http.Request, arg2 string) (accessor.Access, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 *http.Request
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccessFactory) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeAccessFactory) CreateCalls(stub func(*http.Request, string) (accessor.Access, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeAccessFactory) CreateArgsForCall(i int) (*http.Request, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccessFactory) CreateReturns(result1 accessor.Access, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 accessor.Access
		result2 error
	}{result1, result2}
}

func (fake *FakeAccessFactory) CreateReturnsOnCall(i int, result1 accessor.Access, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 accessor.Access
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 accessor.Access
		result2 error
	}{result1, result2}
}

func (fake *FakeAccessFactory) CustomizeActionRoleMap(arg1 lager.Logger, arg2 accessor.CustomActionRoleMap) error {
	fake.customizeActionRoleMapMutex.Lock()
	ret, specificReturn := fake.customizeActionRoleMapReturnsOnCall[len(fake.customizeActionRoleMapArgsForCall)]
	fake.customizeActionRoleMapArgsForCall = append(fake.customizeActionRoleMapArgsForCall, struct {
		arg1 lager.Logger
		arg2 accessor.CustomActionRoleMap
	}{arg1, arg2})
	fake.recordInvocation("CustomizeActionRoleMap", []interface{}{arg1, arg2})
	fake.customizeActionRoleMapMutex.Unlock()
	if fake.CustomizeActionRoleMapStub != nil {
		return fake.CustomizeActionRoleMapStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.customizeActionRoleMapReturns
	return fakeReturns.result1
}

func (fake *FakeAccessFactory) CustomizeActionRoleMapCallCount() int {
	fake.customizeActionRoleMapMutex.RLock()
	defer fake.customizeActionRoleMapMutex.RUnlock()
	return len(fake.customizeActionRoleMapArgsForCall)
}

func (fake *FakeAccessFactory) CustomizeActionRoleMapCalls(stub func(lager.Logger, accessor.CustomActionRoleMap) error) {
	fake.customizeActionRoleMapMutex.Lock()
	defer fake.customizeActionRoleMapMutex.Unlock()
	fake.CustomizeActionRoleMapStub = stub
}

func (fake *FakeAccessFactory) CustomizeActionRoleMapArgsForCall(i int) (lager.Logger, accessor.CustomActionRoleMap) {
	fake.customizeActionRoleMapMutex.RLock()
	defer fake.customizeActionRoleMapMutex.RUnlock()
	argsForCall := fake.customizeActionRoleMapArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAccessFactory) CustomizeActionRoleMapReturns(result1 error) {
	fake.customizeActionRoleMapMutex.Lock()
	defer fake.customizeActionRoleMapMutex.Unlock()
	fake.CustomizeActionRoleMapStub = nil
	fake.customizeActionRoleMapReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAccessFactory) CustomizeActionRoleMapReturnsOnCall(i int, result1 error) {
	fake.customizeActionRoleMapMutex.Lock()
	defer fake.customizeActionRoleMapMutex.Unlock()
	fake.CustomizeActionRoleMapStub = nil
	if fake.customizeActionRoleMapReturnsOnCall == nil {
		fake.customizeActionRoleMapReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.customizeActionRoleMapReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAccessFactory) RoleOfAction(arg1 string) string {
	fake.roleOfActionMutex.Lock()
	ret, specificReturn := fake.roleOfActionReturnsOnCall[len(fake.roleOfActionArgsForCall)]
	fake.roleOfActionArgsForCall = append(fake.roleOfActionArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RoleOfAction", []interface{}{arg1})
	fake.roleOfActionMutex.Unlock()
	if fake.RoleOfActionStub != nil {
		return fake.RoleOfActionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.roleOfActionReturns
	return fakeReturns.result1
}

func (fake *FakeAccessFactory) RoleOfActionCallCount() int {
	fake.roleOfActionMutex.RLock()
	defer fake.roleOfActionMutex.RUnlock()
	return len(fake.roleOfActionArgsForCall)
}

func (fake *FakeAccessFactory) RoleOfActionCalls(stub func(string) string) {
	fake.roleOfActionMutex.Lock()
	defer fake.roleOfActionMutex.Unlock()
	fake.RoleOfActionStub = stub
}

func (fake *FakeAccessFactory) RoleOfActionArgsForCall(i int) string {
	fake.roleOfActionMutex.RLock()
	defer fake.roleOfActionMutex.RUnlock()
	argsForCall := fake.roleOfActionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAccessFactory) RoleOfActionReturns(result1 string) {
	fake.roleOfActionMutex.Lock()
	defer fake.roleOfActionMutex.Unlock()
	fake.RoleOfActionStub = nil
	fake.roleOfActionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAccessFactory) RoleOfActionReturnsOnCall(i int, result1 string) {
	fake.roleOfActionMutex.Lock()
	defer fake.roleOfActionMutex.Unlock()
	fake.RoleOfActionStub = nil
	if fake.roleOfActionReturnsOnCall == nil {
		fake.roleOfActionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.roleOfActionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeAccessFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.customizeActionRoleMapMutex.RLock()
	defer fake.customizeActionRoleMapMutex.RUnlock()
	fake.roleOfActionMutex.RLock()
	defer fake.roleOfActionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccessFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ accessor.AccessFactory = new(FakeAccessFactory)

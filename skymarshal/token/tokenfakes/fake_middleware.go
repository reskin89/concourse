// Code generated by counterfeiter. DO NOT EDIT.
package tokenfakes

import (
	"net/http"
	"sync"
	"time"

	"github.com/concourse/concourse/skymarshal/token"
)

type FakeMiddleware struct {
	GetAuthTokenStub        func(*http.Request) string
	getAuthTokenMutex       sync.RWMutex
	getAuthTokenArgsForCall []struct {
		arg1 *http.Request
	}
	getAuthTokenReturns struct {
		result1 string
	}
	getAuthTokenReturnsOnCall map[int]struct {
		result1 string
	}
	GetCSRFTokenStub        func(*http.Request) string
	getCSRFTokenMutex       sync.RWMutex
	getCSRFTokenArgsForCall []struct {
		arg1 *http.Request
	}
	getCSRFTokenReturns struct {
		result1 string
	}
	getCSRFTokenReturnsOnCall map[int]struct {
		result1 string
	}
	GetStateTokenStub        func(*http.Request) string
	getStateTokenMutex       sync.RWMutex
	getStateTokenArgsForCall []struct {
		arg1 *http.Request
	}
	getStateTokenReturns struct {
		result1 string
	}
	getStateTokenReturnsOnCall map[int]struct {
		result1 string
	}
	SetAuthTokenStub        func(http.ResponseWriter, string, time.Time) error
	setAuthTokenMutex       sync.RWMutex
	setAuthTokenArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 string
		arg3 time.Time
	}
	setAuthTokenReturns struct {
		result1 error
	}
	setAuthTokenReturnsOnCall map[int]struct {
		result1 error
	}
	SetCSRFTokenStub        func(http.ResponseWriter, string, time.Time) error
	setCSRFTokenMutex       sync.RWMutex
	setCSRFTokenArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 string
		arg3 time.Time
	}
	setCSRFTokenReturns struct {
		result1 error
	}
	setCSRFTokenReturnsOnCall map[int]struct {
		result1 error
	}
	SetStateTokenStub        func(http.ResponseWriter, string, time.Time) error
	setStateTokenMutex       sync.RWMutex
	setStateTokenArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 string
		arg3 time.Time
	}
	setStateTokenReturns struct {
		result1 error
	}
	setStateTokenReturnsOnCall map[int]struct {
		result1 error
	}
	UnsetAuthTokenStub        func(http.ResponseWriter)
	unsetAuthTokenMutex       sync.RWMutex
	unsetAuthTokenArgsForCall []struct {
		arg1 http.ResponseWriter
	}
	UnsetCSRFTokenStub        func(http.ResponseWriter)
	unsetCSRFTokenMutex       sync.RWMutex
	unsetCSRFTokenArgsForCall []struct {
		arg1 http.ResponseWriter
	}
	UnsetStateTokenStub        func(http.ResponseWriter)
	unsetStateTokenMutex       sync.RWMutex
	unsetStateTokenArgsForCall []struct {
		arg1 http.ResponseWriter
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMiddleware) GetAuthToken(arg1 *http.Request) string {
	fake.getAuthTokenMutex.Lock()
	ret, specificReturn := fake.getAuthTokenReturnsOnCall[len(fake.getAuthTokenArgsForCall)]
	fake.getAuthTokenArgsForCall = append(fake.getAuthTokenArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("GetAuthToken", []interface{}{arg1})
	fake.getAuthTokenMutex.Unlock()
	if fake.GetAuthTokenStub != nil {
		return fake.GetAuthTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getAuthTokenReturns
	return fakeReturns.result1
}

func (fake *FakeMiddleware) GetAuthTokenCallCount() int {
	fake.getAuthTokenMutex.RLock()
	defer fake.getAuthTokenMutex.RUnlock()
	return len(fake.getAuthTokenArgsForCall)
}

func (fake *FakeMiddleware) GetAuthTokenCalls(stub func(*http.Request) string) {
	fake.getAuthTokenMutex.Lock()
	defer fake.getAuthTokenMutex.Unlock()
	fake.GetAuthTokenStub = stub
}

func (fake *FakeMiddleware) GetAuthTokenArgsForCall(i int) *http.Request {
	fake.getAuthTokenMutex.RLock()
	defer fake.getAuthTokenMutex.RUnlock()
	argsForCall := fake.getAuthTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMiddleware) GetAuthTokenReturns(result1 string) {
	fake.getAuthTokenMutex.Lock()
	defer fake.getAuthTokenMutex.Unlock()
	fake.GetAuthTokenStub = nil
	fake.getAuthTokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMiddleware) GetAuthTokenReturnsOnCall(i int, result1 string) {
	fake.getAuthTokenMutex.Lock()
	defer fake.getAuthTokenMutex.Unlock()
	fake.GetAuthTokenStub = nil
	if fake.getAuthTokenReturnsOnCall == nil {
		fake.getAuthTokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getAuthTokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMiddleware) GetCSRFToken(arg1 *http.Request) string {
	fake.getCSRFTokenMutex.Lock()
	ret, specificReturn := fake.getCSRFTokenReturnsOnCall[len(fake.getCSRFTokenArgsForCall)]
	fake.getCSRFTokenArgsForCall = append(fake.getCSRFTokenArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("GetCSRFToken", []interface{}{arg1})
	fake.getCSRFTokenMutex.Unlock()
	if fake.GetCSRFTokenStub != nil {
		return fake.GetCSRFTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getCSRFTokenReturns
	return fakeReturns.result1
}

func (fake *FakeMiddleware) GetCSRFTokenCallCount() int {
	fake.getCSRFTokenMutex.RLock()
	defer fake.getCSRFTokenMutex.RUnlock()
	return len(fake.getCSRFTokenArgsForCall)
}

func (fake *FakeMiddleware) GetCSRFTokenCalls(stub func(*http.Request) string) {
	fake.getCSRFTokenMutex.Lock()
	defer fake.getCSRFTokenMutex.Unlock()
	fake.GetCSRFTokenStub = stub
}

func (fake *FakeMiddleware) GetCSRFTokenArgsForCall(i int) *http.Request {
	fake.getCSRFTokenMutex.RLock()
	defer fake.getCSRFTokenMutex.RUnlock()
	argsForCall := fake.getCSRFTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMiddleware) GetCSRFTokenReturns(result1 string) {
	fake.getCSRFTokenMutex.Lock()
	defer fake.getCSRFTokenMutex.Unlock()
	fake.GetCSRFTokenStub = nil
	fake.getCSRFTokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMiddleware) GetCSRFTokenReturnsOnCall(i int, result1 string) {
	fake.getCSRFTokenMutex.Lock()
	defer fake.getCSRFTokenMutex.Unlock()
	fake.GetCSRFTokenStub = nil
	if fake.getCSRFTokenReturnsOnCall == nil {
		fake.getCSRFTokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getCSRFTokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMiddleware) GetStateToken(arg1 *http.Request) string {
	fake.getStateTokenMutex.Lock()
	ret, specificReturn := fake.getStateTokenReturnsOnCall[len(fake.getStateTokenArgsForCall)]
	fake.getStateTokenArgsForCall = append(fake.getStateTokenArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("GetStateToken", []interface{}{arg1})
	fake.getStateTokenMutex.Unlock()
	if fake.GetStateTokenStub != nil {
		return fake.GetStateTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getStateTokenReturns
	return fakeReturns.result1
}

func (fake *FakeMiddleware) GetStateTokenCallCount() int {
	fake.getStateTokenMutex.RLock()
	defer fake.getStateTokenMutex.RUnlock()
	return len(fake.getStateTokenArgsForCall)
}

func (fake *FakeMiddleware) GetStateTokenCalls(stub func(*http.Request) string) {
	fake.getStateTokenMutex.Lock()
	defer fake.getStateTokenMutex.Unlock()
	fake.GetStateTokenStub = stub
}

func (fake *FakeMiddleware) GetStateTokenArgsForCall(i int) *http.Request {
	fake.getStateTokenMutex.RLock()
	defer fake.getStateTokenMutex.RUnlock()
	argsForCall := fake.getStateTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMiddleware) GetStateTokenReturns(result1 string) {
	fake.getStateTokenMutex.Lock()
	defer fake.getStateTokenMutex.Unlock()
	fake.GetStateTokenStub = nil
	fake.getStateTokenReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeMiddleware) GetStateTokenReturnsOnCall(i int, result1 string) {
	fake.getStateTokenMutex.Lock()
	defer fake.getStateTokenMutex.Unlock()
	fake.GetStateTokenStub = nil
	if fake.getStateTokenReturnsOnCall == nil {
		fake.getStateTokenReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getStateTokenReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeMiddleware) SetAuthToken(arg1 http.ResponseWriter, arg2 string, arg3 time.Time) error {
	fake.setAuthTokenMutex.Lock()
	ret, specificReturn := fake.setAuthTokenReturnsOnCall[len(fake.setAuthTokenArgsForCall)]
	fake.setAuthTokenArgsForCall = append(fake.setAuthTokenArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 string
		arg3 time.Time
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetAuthToken", []interface{}{arg1, arg2, arg3})
	fake.setAuthTokenMutex.Unlock()
	if fake.SetAuthTokenStub != nil {
		return fake.SetAuthTokenStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setAuthTokenReturns
	return fakeReturns.result1
}

func (fake *FakeMiddleware) SetAuthTokenCallCount() int {
	fake.setAuthTokenMutex.RLock()
	defer fake.setAuthTokenMutex.RUnlock()
	return len(fake.setAuthTokenArgsForCall)
}

func (fake *FakeMiddleware) SetAuthTokenCalls(stub func(http.ResponseWriter, string, time.Time) error) {
	fake.setAuthTokenMutex.Lock()
	defer fake.setAuthTokenMutex.Unlock()
	fake.SetAuthTokenStub = stub
}

func (fake *FakeMiddleware) SetAuthTokenArgsForCall(i int) (http.ResponseWriter, string, time.Time) {
	fake.setAuthTokenMutex.RLock()
	defer fake.setAuthTokenMutex.RUnlock()
	argsForCall := fake.setAuthTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMiddleware) SetAuthTokenReturns(result1 error) {
	fake.setAuthTokenMutex.Lock()
	defer fake.setAuthTokenMutex.Unlock()
	fake.SetAuthTokenStub = nil
	fake.setAuthTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) SetAuthTokenReturnsOnCall(i int, result1 error) {
	fake.setAuthTokenMutex.Lock()
	defer fake.setAuthTokenMutex.Unlock()
	fake.SetAuthTokenStub = nil
	if fake.setAuthTokenReturnsOnCall == nil {
		fake.setAuthTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setAuthTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) SetCSRFToken(arg1 http.ResponseWriter, arg2 string, arg3 time.Time) error {
	fake.setCSRFTokenMutex.Lock()
	ret, specificReturn := fake.setCSRFTokenReturnsOnCall[len(fake.setCSRFTokenArgsForCall)]
	fake.setCSRFTokenArgsForCall = append(fake.setCSRFTokenArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 string
		arg3 time.Time
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetCSRFToken", []interface{}{arg1, arg2, arg3})
	fake.setCSRFTokenMutex.Unlock()
	if fake.SetCSRFTokenStub != nil {
		return fake.SetCSRFTokenStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setCSRFTokenReturns
	return fakeReturns.result1
}

func (fake *FakeMiddleware) SetCSRFTokenCallCount() int {
	fake.setCSRFTokenMutex.RLock()
	defer fake.setCSRFTokenMutex.RUnlock()
	return len(fake.setCSRFTokenArgsForCall)
}

func (fake *FakeMiddleware) SetCSRFTokenCalls(stub func(http.ResponseWriter, string, time.Time) error) {
	fake.setCSRFTokenMutex.Lock()
	defer fake.setCSRFTokenMutex.Unlock()
	fake.SetCSRFTokenStub = stub
}

func (fake *FakeMiddleware) SetCSRFTokenArgsForCall(i int) (http.ResponseWriter, string, time.Time) {
	fake.setCSRFTokenMutex.RLock()
	defer fake.setCSRFTokenMutex.RUnlock()
	argsForCall := fake.setCSRFTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMiddleware) SetCSRFTokenReturns(result1 error) {
	fake.setCSRFTokenMutex.Lock()
	defer fake.setCSRFTokenMutex.Unlock()
	fake.SetCSRFTokenStub = nil
	fake.setCSRFTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) SetCSRFTokenReturnsOnCall(i int, result1 error) {
	fake.setCSRFTokenMutex.Lock()
	defer fake.setCSRFTokenMutex.Unlock()
	fake.SetCSRFTokenStub = nil
	if fake.setCSRFTokenReturnsOnCall == nil {
		fake.setCSRFTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setCSRFTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) SetStateToken(arg1 http.ResponseWriter, arg2 string, arg3 time.Time) error {
	fake.setStateTokenMutex.Lock()
	ret, specificReturn := fake.setStateTokenReturnsOnCall[len(fake.setStateTokenArgsForCall)]
	fake.setStateTokenArgsForCall = append(fake.setStateTokenArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 string
		arg3 time.Time
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetStateToken", []interface{}{arg1, arg2, arg3})
	fake.setStateTokenMutex.Unlock()
	if fake.SetStateTokenStub != nil {
		return fake.SetStateTokenStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setStateTokenReturns
	return fakeReturns.result1
}

func (fake *FakeMiddleware) SetStateTokenCallCount() int {
	fake.setStateTokenMutex.RLock()
	defer fake.setStateTokenMutex.RUnlock()
	return len(fake.setStateTokenArgsForCall)
}

func (fake *FakeMiddleware) SetStateTokenCalls(stub func(http.ResponseWriter, string, time.Time) error) {
	fake.setStateTokenMutex.Lock()
	defer fake.setStateTokenMutex.Unlock()
	fake.SetStateTokenStub = stub
}

func (fake *FakeMiddleware) SetStateTokenArgsForCall(i int) (http.ResponseWriter, string, time.Time) {
	fake.setStateTokenMutex.RLock()
	defer fake.setStateTokenMutex.RUnlock()
	argsForCall := fake.setStateTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMiddleware) SetStateTokenReturns(result1 error) {
	fake.setStateTokenMutex.Lock()
	defer fake.setStateTokenMutex.Unlock()
	fake.SetStateTokenStub = nil
	fake.setStateTokenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) SetStateTokenReturnsOnCall(i int, result1 error) {
	fake.setStateTokenMutex.Lock()
	defer fake.setStateTokenMutex.Unlock()
	fake.SetStateTokenStub = nil
	if fake.setStateTokenReturnsOnCall == nil {
		fake.setStateTokenReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setStateTokenReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMiddleware) UnsetAuthToken(arg1 http.ResponseWriter) {
	fake.unsetAuthTokenMutex.Lock()
	fake.unsetAuthTokenArgsForCall = append(fake.unsetAuthTokenArgsForCall, struct {
		arg1 http.ResponseWriter
	}{arg1})
	fake.recordInvocation("UnsetAuthToken", []interface{}{arg1})
	fake.unsetAuthTokenMutex.Unlock()
	if fake.UnsetAuthTokenStub != nil {
		fake.UnsetAuthTokenStub(arg1)
	}
}

func (fake *FakeMiddleware) UnsetAuthTokenCallCount() int {
	fake.unsetAuthTokenMutex.RLock()
	defer fake.unsetAuthTokenMutex.RUnlock()
	return len(fake.unsetAuthTokenArgsForCall)
}

func (fake *FakeMiddleware) UnsetAuthTokenCalls(stub func(http.ResponseWriter)) {
	fake.unsetAuthTokenMutex.Lock()
	defer fake.unsetAuthTokenMutex.Unlock()
	fake.UnsetAuthTokenStub = stub
}

func (fake *FakeMiddleware) UnsetAuthTokenArgsForCall(i int) http.ResponseWriter {
	fake.unsetAuthTokenMutex.RLock()
	defer fake.unsetAuthTokenMutex.RUnlock()
	argsForCall := fake.unsetAuthTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMiddleware) UnsetCSRFToken(arg1 http.ResponseWriter) {
	fake.unsetCSRFTokenMutex.Lock()
	fake.unsetCSRFTokenArgsForCall = append(fake.unsetCSRFTokenArgsForCall, struct {
		arg1 http.ResponseWriter
	}{arg1})
	fake.recordInvocation("UnsetCSRFToken", []interface{}{arg1})
	fake.unsetCSRFTokenMutex.Unlock()
	if fake.UnsetCSRFTokenStub != nil {
		fake.UnsetCSRFTokenStub(arg1)
	}
}

func (fake *FakeMiddleware) UnsetCSRFTokenCallCount() int {
	fake.unsetCSRFTokenMutex.RLock()
	defer fake.unsetCSRFTokenMutex.RUnlock()
	return len(fake.unsetCSRFTokenArgsForCall)
}

func (fake *FakeMiddleware) UnsetCSRFTokenCalls(stub func(http.ResponseWriter)) {
	fake.unsetCSRFTokenMutex.Lock()
	defer fake.unsetCSRFTokenMutex.Unlock()
	fake.UnsetCSRFTokenStub = stub
}

func (fake *FakeMiddleware) UnsetCSRFTokenArgsForCall(i int) http.ResponseWriter {
	fake.unsetCSRFTokenMutex.RLock()
	defer fake.unsetCSRFTokenMutex.RUnlock()
	argsForCall := fake.unsetCSRFTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMiddleware) UnsetStateToken(arg1 http.ResponseWriter) {
	fake.unsetStateTokenMutex.Lock()
	fake.unsetStateTokenArgsForCall = append(fake.unsetStateTokenArgsForCall, struct {
		arg1 http.ResponseWriter
	}{arg1})
	fake.recordInvocation("UnsetStateToken", []interface{}{arg1})
	fake.unsetStateTokenMutex.Unlock()
	if fake.UnsetStateTokenStub != nil {
		fake.UnsetStateTokenStub(arg1)
	}
}

func (fake *FakeMiddleware) UnsetStateTokenCallCount() int {
	fake.unsetStateTokenMutex.RLock()
	defer fake.unsetStateTokenMutex.RUnlock()
	return len(fake.unsetStateTokenArgsForCall)
}

func (fake *FakeMiddleware) UnsetStateTokenCalls(stub func(http.ResponseWriter)) {
	fake.unsetStateTokenMutex.Lock()
	defer fake.unsetStateTokenMutex.Unlock()
	fake.UnsetStateTokenStub = stub
}

func (fake *FakeMiddleware) UnsetStateTokenArgsForCall(i int) http.ResponseWriter {
	fake.unsetStateTokenMutex.RLock()
	defer fake.unsetStateTokenMutex.RUnlock()
	argsForCall := fake.unsetStateTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMiddleware) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAuthTokenMutex.RLock()
	defer fake.getAuthTokenMutex.RUnlock()
	fake.getCSRFTokenMutex.RLock()
	defer fake.getCSRFTokenMutex.RUnlock()
	fake.getStateTokenMutex.RLock()
	defer fake.getStateTokenMutex.RUnlock()
	fake.setAuthTokenMutex.RLock()
	defer fake.setAuthTokenMutex.RUnlock()
	fake.setCSRFTokenMutex.RLock()
	defer fake.setCSRFTokenMutex.RUnlock()
	fake.setStateTokenMutex.RLock()
	defer fake.setStateTokenMutex.RUnlock()
	fake.unsetAuthTokenMutex.RLock()
	defer fake.unsetAuthTokenMutex.RUnlock()
	fake.unsetCSRFTokenMutex.RLock()
	defer fake.unsetCSRFTokenMutex.RUnlock()
	fake.unsetStateTokenMutex.RLock()
	defer fake.unsetStateTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMiddleware) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ token.Middleware = new(FakeMiddleware)
